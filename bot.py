import random
import re
import sqlite3
import asyncio
import os
import datetime
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from dotenv import load_dotenv, find_dotenv

admin_id = 1900666417

load_dotenv(find_dotenv())
bot = AsyncTeleBot(os.getenv('TOKEN_BOT'))

db = sqlite3.connect('db/fnaf.db', check_same_thread=False)
sql = db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü users –∏ download
sql.execute("""CREATE TABLE IF NOT EXISTS download(
    id integer PRIMARY KEY AUTOINCREMENT,
    tg_id integer,
    link text,
    date date


)""")

sql.execute("""CREATE TABLE IF NOT EXISTS users(
    id integer PRIMARY KEY AUTOINCREMENT,
    tg_id integer,
    username text,
    utm text,
    date date
)""")



db_tiktok = sqlite3.connect('~TTsavee/db/ttsavee.db', check_same_thread=False)
db_insta = sqlite3.connect('~korzu/InstaSavee/db/instasavee.db', check_same_thread=False)

def checkSubscribe(tg_id, db):
    sql = db.cursor()

    sql.execute("SELECT * FROM users WHERE tg_id = $1;", tg_id)

    user = sql.fetchone()

    sql.close()

    if user:
        return True
    else:
        return False


async def all_bot(chat_id,message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    button_1 = types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ TikTok", url="https://t.me/saving_tt_video_bot?start=Fnaf")
    button_2 = types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram",url="https://t.me/saving_insta_bot?start=Fnaf")

    markup.add(button_1,button_2)

    await bot.send_message(message.chat.id,
                           '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã –∏–∑ FNAF, —Ç–µ–±–µ —Ç–∞–∫ –∂–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤',reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['sendall'])
async def send_all_message(message: types.Message):
    sql.execute("SELECT tg_id FROM users;")
    users = sql.fetchall()
    if message.chat.id == admin_id:
        await bot.send_message(message.chat.id, 'üíå Starting')
        for i in users:
            try:
                print("Send to: ", str(i[0]))
                await bot.send_message(i[0], message.text[message.text.find(' '):], parse_mode='html')
            except Exception as error:
                print("Blocked bot: ", str(i[0]))
            # await bot.send_message(i[0],message.text[message.text.find(' '):],parse_mode='html')
        await bot.send_message(message.chat.id, '‚úÖ Successfully')
    else:
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['download_db'])
async def command_download_db(message):
    if message.chat.id == admin_id:
        db = open('db/fnaf.db', 'rb')
        await bot.send_document(message.chat.id, db)
    else:
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

@bot.message_handler(commands=['users'])
async def all_users(message):
    if message.chat.id == admin_id:
        sql.execute("SELECT tg_id FROM users;")
        users = sql.fetchall()
        await bot.send_message(message.chat.id, f'üëª –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>',
                               parse_mode='html')
    else:
        await bot.send_message(message.chat.id, f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

name = ['üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –§—Ä–µ–¥–¥–∏! ', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ë–æ–Ω–Ω–∏!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ß–∏–∫–∞!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –§–æ–∫—Å–∏!',
        'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ó–æ–ª–æ—Ç–æ–π –§—Ä–µ–¥–¥–∏!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ú–∞—Ä–∏–æ–Ω–µ—Ç–∫–∞!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ë–∞–ª—É–Ω –ë–æ–π!',
        'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –°–ø—Ä–∏–Ω–≥—Ç—Ä–∞–ø!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ú–∞–Ω–≥–ª!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –¶–∏—Ä–∫—É—Å –ë—ç–±–∏!',
        'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –≠–Ω–Ω–∞—Ä–¥!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –ë–∞–ª–ª–æ—Ä–∞!', 'üò± –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—ã –£–∏–ª—å—è–º –ê—Ñ—Ç–æ–Ω!']

photo = ['img/freddy.jpg', 'img/bonny.jpg', 'img/chika.jpg', 'img/foxy.jpg', 'img/golden_freddy.jpg',
         'img/marionetka.jpg', 'img/balunboy.jpg', 'img/springtrap.jpg', 'img/mangl.jpg', 'img/cirk_baby.jpg',
         'img/ennar.jpg', 'img/ballora.jpg', 'img/aftin.jpg']

characters = dict(zip(name, photo))


@bot.message_handler(commands=['start'])
async def command_start(message):
    utm_label = (message.text).split(' ')

    print(len(utm_label))
    if len(utm_label) >= 2:
        utm = utm_label[1]
    else:
        utm = 'hull'

    date = datetime.datetime.now()
    tg_id = message.from_user.id
    sql.execute(f"SELECT tg_id FROM users WHERE tg_id={tg_id}")
    data = sql.fetchone()
    username = message.from_user.username

    sql.execute("SELECT tg_id FROM download;")
    quantity_download = sql.fetchall()
    if data is None:

        if message.from_user.username != None:
            await bot.send_message(admin_id, f'üë§ New user : @{message.from_user.username} {message.chat.id}')
        else:
            await bot.send_message(admin_id, f'üë§ New user : {message.chat.id}')


        if username != None:

            sql.execute("INSERT INTO users VALUES (?,?,?,?,?)", (None, tg_id, username, utm, date))
            db.commit()
        else:
            username_none = 'Stranger'
            sql.execute("INSERT INTO users VALUES (?,?,?,?,?)", (None, tg_id, username_none, utm, date))
            db.commit()

    with open('img/start.png', 'rb') as start_photo:
        await bot.send_photo(message.chat.id, start_photo,
                             '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b>–ö—Ç–æ —Ç—ã –∏–∑ FNaF?</b> üêªüê∞ü¶ä\n\n–î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.10.1990).\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –≤–≤–µ–¥–µ—à—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —è —Å–∫–∞–∂—É, –∫—Ç–æ —Ç—ã –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π FNaF.\n\n<b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!</b>',
                             parse_mode='html')


@bot.message_handler(content_types=['text'])
async def message_handler(message):
    checkSubscribe(message.chat.id, db_tiktok)
    if checkSubscribe == True:
        if re.match(r'\d{2}.\d{2}.\d{4}', message.text):
                if message.from_user.username != None:
                    await bot.send_message(admin_id,
                                               f'<b>Username: @{message.from_user.username}</b>\n<b>üë§ User id:</b> {message.chat.id}\n<b>‚õì text</b>: <code>{message.text}</code>\n<b>üü¢ Status:</b> üì© Link accepted!',
                                               parse_mode='html')
                else:
                    await bot.send_message(admin_id,
                                               f'<b>üë§ User:</b> {message.chat.id}\n<b>‚õìtext</b>: <code>{message.text}</code>\n<b>üü¢ Status:</b> üì© Link accepted!',
                                               parse_mode='html')

                random_name = random.choice(name)

                random_photo = characters[random_name]
                with open(f'{random_photo}', 'rb') as photo:

                    await bot.send_photo(message.chat.id, photo, f'<b>{random_name}</b>\n\n–í–∞—à–∞ —Å–≤—è–∑—å —Å —ç—Ç–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á–æ–º –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–≥—Ä—ã –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—é –µ—ë —Å—é–∂–µ—Ç–∞. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –∏ –æ–ø–∞—Å–Ω–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é, –≥–¥–µ –≤—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤–∞–∂–Ω—É—é —Ä–æ–ª—å.\n\n<b>üåü–£–¥–∞—á–∏ –≤ —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ!</b>',
                                         parse_mode='html')
                    words = random_name.split()
                    last_word = words[-1]
                    inline_keyboard = types.InlineKeyboardMarkup()
                    share_button = types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f'–ü–æ–º–æ–≥ –º–Ω–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ —è –∏–∑ FNaF.\n\nüò± –ö–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å —è {last_word}')

                    inline_keyboard.add(share_button)

                    await bot.send_message(message.chat.id, "–°–∫–æ—Ä–µ–µ –¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º  —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏! üêªüê∞ü¶ä",
                                           reply_markup=inline_keyboard)
                date = datetime.datetime.now()
                tg_id = message.from_user.id
                link = message.text
                sql.execute("INSERT INTO download VALUES (?,?,?,?)", (None, tg_id, link, date))
                db.commit()
        else:
            await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥.')
    else:
        await all_bot(message.chat.id,message)
asyncio.run(bot.polling(non_stop=True))
